name: Build and Release

on:
    push:
        tags:
            - "v*.*.*"

jobs:
    build:
        name: Build for ${{ matrix.platform.os }}/${{ matrix.platform.arch }}
        runs-on: ubuntu-latest

        strategy:
            matrix:
                platform:
                    - { os: linux, arch: amd64 }
                    - { os: windows, arch: amd64 }
                    - { os: darwin, arch: amd64 }
                    - { os: darwin, arch: arm64 }

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: "go.mod"

            - name: Prepare variables for build
              id: vars
              run: |
                  BINARY_NAME="getctx"
                  if [ "${{ matrix.platform.os }}" = "windows" ]; then
                    EXT=".exe"
                  else
                    EXT=""
                  fi

                  echo "BINARY_FILE=${BINARY_NAME}${EXT}" >> $GITHUB_OUTPUT
                  echo "ARCHIVE_NAME=${BINARY_NAME}_${{ github.ref_name }}_${{ matrix.platform.os }}_${{ matrix.platform.arch }}" >> $GITHUB_OUTPUT

            - name: Build binary
              run: |
                  # Kompilacja krzyżowa (cross-compilation) z użyciem zmiennych środowiskowych
                  env GOOS=${{ matrix.platform.os }} GOARCH=${{ matrix.platform.arch }} \
                  go build -o "dist/${{ steps.vars.outputs.BINARY_FILE }}" ./cmd/getctx

            - name: Package binary into an archive
              run: |
                  cd dist
                  if [ "${{ matrix.platform.os }}" = "windows" ]; then
                    zip "${{ steps.vars.outputs.ARCHIVE_NAME }}.zip" "${{ steps.vars.outputs.BINARY_FILE }}"
                  else
                    tar -czf "${{ steps.vars.outputs.ARCHIVE_NAME }}.tar.gz" "${{ steps.vars.outputs.BINARY_FILE }}"
                  fi

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: binary-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
                  path: dist/*
                  if-no-files-found: error

    release:
        name: Create GitHub Release
        needs: build
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: release-assets

            - name: Create Release and Upload Assets
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref }}
                  generate_release_notes: true
                  files: release-assets/*/*
